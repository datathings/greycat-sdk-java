@library("std", "6.1.82-dev");

// @library("algebra");
// @library("decisiontrees"); // Non-existent
// @library("network");
// @library("patterns");
// @library("sql"); // reference to sql_n non-existing class
// @library("useragent"); // Tricky useragent.useragent is tricky

use debug;
use io;
use runtime;

fn minimal_fail() {
  var out = AbiWriter::new("fail.gcb");
}

fn main() {
  var out = AbiWriter::new("out.gcb");
  write_std(out);
}

fn write_std(out: AbiWriter) {
  write_core(out);
  write_debug(out);
  write_io(out);
  write_runtime(out);
}

fn write_core(out: AbiWriter) {
  out.write(true);
  out.write('*');
  // 1 byte
  out.write(0);
  out.write(1);
  out.write(-1);
  out.write(63);
  out.write(-64);
  // 2 bytes
  out.write(64);
  out.write(-65);
  out.write(8191);
  out.write(-8192);
  // 3 bytes
  out.write(8192);
  out.write(-8193);
  out.write(1048575);
  out.write(-1048576);
  // 4 bytes
  out.write(1048576);
  out.write(-1048577);
  out.write(134217727);
  out.write(-134217728);
  // 5 bytes
  out.write(134217728);
  out.write(-134217729);
  out.write(17179869183);
  out.write(-17179869184);
  // 6 bytes
  out.write(17179869184);
  out.write(-17179869185);
  out.write(2199023255551);
  out.write(-2199023255552);
  // 7 bytes
  out.write(2199023255552);
  out.write(-2199023255553);
  out.write(281474976710655);
  out.write(-281474976710656);
  // 8 bytes
  out.write(281474976710656);
  out.write(-281474976710657);
  out.write(36028797018963967);
  out.write(-36028797018963968);
  // 9 bytes
  out.write(36028797018963968);
  out.write(-36028797018963969);
  out.write(9223372036854775807);
  out.write(-9223372036854775808);
  out.write(13.37);
  out.write("Hello world");
  out.write("${"Hello world"}");
  out.write(GeoBox::new(13_geo, 37_geo));
  out.write(nodeList<int>::new());
  out.write(TimeZone::Europe_Luxembourg);
  out.write(node<float>::new(13.37));
  out.write(Error::new(""));
  out.write(ErrorCode::none);
  out.write(SamplingMode::adaptative);
  out.write(DurationUnit::days);
  out.write(TensorType::c128);
  out.write(Table<node>::new(0, false));
  out.write(42_geo);
  out.write(Tensor::new());
  out.write(GeoCircle::new(42_geo, 13.37));
  out.write(Date::new(2012, 12, 12, 12, 12, 12, 12, TimeZone::Europe_Luxembourg));
  out.write(Map<geo, time>::new());
  out.write(duration::new(12, DurationUnit::microseconds));
  out.write(nodeTime<nodeGeo>::new());
  out.write(Array<nodeTime>::new(0));
  out.write(Tuple<Array, Map>::new(Array::new(0), Map::new()));
  out.write(nodeIndex<Tuple>::new());
  out.write(GeoPoly::new([13_geo, 37_geo, 13_geo]));
  out.write(12_time);
  out.write(DatePart::days);
  out.write(nodeGeo<DatePart>::new());
}

fn write_debug(out: AbiWriter) {
  out.write(TypeAttr{
    name: "",
    is_static: false,
  });
  out.write(TypeDesc{
    module: "",
    name: "",
    methods: [],
    attrs: [],
    is_abstract: true,
    is_enum: false,
  });
  out.write(TypeRef{
    name: "",
    module: "",
    nullable: true,
  });
  out.write(FnParam{
    name: "",
    type: TypeRef{
        name: "",
        module: "",
        nullable: true,
      },
  });
  out.write(FnMode::read_only);
  out.write(FnDesc{
    module: "",
    name: "",
    params: [],
    is_static: true,
    is_task: false,
    is_exclusive: true,
    is_reserved: false,
    is_exposed: true,
    mode: FnMode::read_only,
    permissions: [],
  });
  out.write(ModVarDesc{
    module: "",
    name: "",
    type: TypeRef{
        name: "",
        module: "",
        nullable: true,
      },
  });
  out.write(ModDesc{
    name: "",
    lib: "",
    functions: [],
    types: [],
    vars: [],
  });
}

fn write_io(out: AbiWriter) {
  // out.write(out); // unsupported
  // out.write(AbiReader::new("out.gcb")); // segfault
  out.write(FileDescriptor{
    uri: "",
  });
  out.write(Env{});
  out.write(TextEncoder::plain);
  out.write(BinaryFormat{});
  out.write(JsonFormat{});
  out.write(TextFormat{});
  out.write(CSVColumnString{});
  out.write(CSVColumnInteger{});
  out.write(CSVColumnFloat{});
  out.write(CSVColumnBoolean{});
  out.write(CSVColumnTime{});
  out.write(CSVColumnDate{});
  out.write(CSVColumnIgnored{});
  out.write(CSVFormat{
    header_lines: 12,
    infer: true,
    separator: ',',
    string_delimiter: '"',
    decimal_separator: '.',
    thousands_separator: '_',
    columns: [],
  });
  out.write(JSON{});
  // out.write(File::open("project.gcl")); // unsupported
  // out.write(Directory::open(".")); // unsupported
  // out.write(FileWriter::new("project.gcl", true)); // unsupported
}

fn write_runtime(out: AbiWriter) {
  out.write(Task{
    id: 13,
    user: 37,
    mod: "",
    type: "",
    fun: "",
    progress: 13.37,
    remaining: duration::new(42, DurationUnit::microseconds),
    creation: 42_time,
    status: TaskStatus::empty,
    sub_waiting: 0,
    sub_tasks_all: 1,
  });
  out.write(TaskStatus::cancelled);
  out.write(Runtime {});
  out.write(RuntimeInfo{
    version: "",
    arch: "",
    timezone: TimeZone::Europe_Luxembourg,
    license: License {
        start: 13_time,
        end: 37_time,
        max_workers: 12,
        max_memory: 42,
        max_store: 0,
      },
    io_threads: 13,
    bg_threads: 37,
    fg_threads: 42,
    mem_total: 12,
    mem_worker: 0,
    nb_ctx: 1,
  });
  out.write(SecurityFields {});
  out.write(UserGroup{
    id: 12,
    name: "",
    activated: false,
  });
  out.write(OpenIDConnect{
    url: "",
    clientId: "",
  });
  out.write(UserRole{
    name: "",
    permissions: [],
  });
  out.write(PeriodicTask{
    name: "",
    user_id: 12,
    start: 13_time,
    every: duration::new(37, DurationUnit::microseconds),
  });
  out.write(User{
    id: 12,
    name: "",
    activated: false,
    external: true,
  });
  out.write(UserGroupPolicy {
      group_id: 12,
      type: UserGroupPolicyType::execute,
    });
  out.write(UserGroupPolicyType::read);
  out.write(License {
      start: 13_time,
      end: 37_time,
      max_workers: 12,
      max_memory: 42,
      max_store: 0,
    });
  out.write(StoreStat {
      capacity_bytes: 13,
      allocated_bytes: 37,
      allocated_ratio: 13.37,
      remained_bytes: 12,
      remained_ratio: 4.20,
      used_bytes: 42,
      used_ratio: 0.1,
      available_bytes: 0,
      available_ratio: 0.2,
    });
  out.write(System {});
  out.write(SecurityPolicy {
      entities: [],
      credentials: Map<String, UserCredential>::new(),
      roles: Map<String, UserRole>::new(),
    });
}
