@library("std", "6.1.82-dev");

// @library("algebra");
// @library("decisiontrees"); // Non-existent
// @library("network");
// @library("patterns");
// @library("sql"); // reference to sql_n non-existing class
// @library("useragent"); // Tricky useragent.useragent is tricky

use io;
use runtime;

fn minimal_fail() {
    var out = AbiWriter::new("fail.gcb");
    out.write("${"Hello world!"}");
    out.write("${"Hello world!"}");
    out.write(GeoBox::new(13_geo, 37_geo));
    out.write(GeoCircle::new(42_geo, 13.37));
}

fn main() {
  var out = AbiWriter::new("out.gcb");
  write_std(out);
}

fn write_std(out: AbiWriter) {
  write_core(out);
  write_runtime(out);
}

fn write_core(out: AbiWriter) {
  out.write(true);
  out.write('*');
  out.write(1);
  out.write(-1);
  out.write(128);
  out.write(-128);
  out.write(16384);
  out.write(-16384);
  out.write(2097152);
  out.write(-2097152);
  out.write(268435456);
  out.write(-268435456);
  out.write(34359738368);
  out.write(-34359738368);
  out.write(4398046511104);
  out.write(-4398046511104);
  out.write(562949953421312);
  out.write(-562949953421312);
  out.write(72057594037927936);
  out.write(-72057594037927936);
  out.write(13.37);
  out.write("Hello world");
  out.write("${"Hello world"}");
  out.write(GeoBox::new(13_geo, 37_geo)); // first byte: 13
  out.write(nodeList<int>::new());
  out.write(TimeZone::Europe_Luxembourg);
  out.write(node<float>::new(13.37));
  out.write(Error::new(""));
  out.write(ErrorCode::none);
  out.write(SamplingMode::adaptative);
  out.write(DurationUnit::days);
  out.write(TensorType::c128);
  out.write(Table<node>::new(0, false));
  out.write(42_geo);
  out.write(Tensor::new());
  out.write(GeoCircle::new(42_geo, 13.37)); // first byte: 42
  out.write(Date::new(2012, 12, 12, 12, 12, 12, 12, TimeZone::Europe_Luxembourg));
  out.write(Map<geo, time>::new());
  out.write(duration::new(12, DurationUnit::microseconds));
  out.write(nodeTime<nodeGeo>::new());
  out.write(Array<nodeTime>::new(0));
  out.write(Tuple<Array, Map>::new(Array::new(0), Map::new()));
  out.write(nodeIndex<Tuple>::new());
  out.write(GeoPoly::new([13_geo, 37_geo, 13_geo]));
  out.write(12_time);
  out.write(DatePart::days);
  out.write(nodeGeo<DatePart>::new());
}

fn write_runtime(out: AbiWriter) {
  // out.write(Task{/*TODO*/});
  out.write(TaskStatus::cancelled);
  out.write(Runtime {});
  // out.write(RuntimeInfo{/*TODO*/});
  out.write(SecurityFields {});
  // out.write(UserGroup{/*TODO*/});
  // out.write(OpenIDConnect{/*TODO*/});
  // out.write(UserRole{/*TODO*/});
  // out.write(PeriodicTask{/*TODO*/});
  // out.write(User{/*TODO*/});
  out.write(UserGroupPolicy {
      group_id: 12,
      type: UserGroupPolicyType::execute,
    });
  out.write(UserGroupPolicyType::read);
  out.write(License {
      start: 13_time,
      end: 37_time,
      max_workers: 12,
      max_memory: 42,
      max_store: 0,
    });
  out.write(StoreStat {
      capacity_bytes: 13,
      allocated_bytes: 37,
      allocated_ratio: 13.37,
      remained_bytes: 12,
      remained_ratio: 4.20,
      used_bytes: 42,
      used_ratio: 0.1,
      available_bytes: 0,
      available_ratio: 0.2,
    });
  out.write(System {});
  out.write(SecurityPolicy {
      entities: [],
      credentials: Map<String, UserCredential>::new(),
      roles: Map<String, UserRole>::new(),
    });
}
